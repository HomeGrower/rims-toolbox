version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile.prod
    container_name: rims_app
    restart: unless-stopped
    working_dir: /var/www/html
    # NO SOURCE CODE VOLUMES IN PRODUCTION - Code is baked into image
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
    networks:
      - rims_network
    depends_on:
      - db
      - redis
    environment:
      - PHP_MEMORY_LIMIT=512M
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  webserver:
    image: nginx:alpine
    container_name: rims_webserver
    restart: unless-stopped
    volumes:
      # Static files from app container
      - app_public:/var/www/html/public:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - rims_network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rims.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.rims.entrypoints=websecure"
      - "traefik.http.routers.rims.tls=true"
      - "traefik.http.routers.rims.middlewares=security-headers"
      - "traefik.http.services.rims.loadbalancer.server.port=80"
      - "traefik.docker.network=rims_network"

  db:
    image: mysql:8.0
    platform: linux/amd64
    container_name: rims_db
    restart: unless-stopped
    # Expose port internally only - DO NOT expose to host in production!
    expose:
      - "3306"
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
    volumes:
      - dbdata:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
    networks:
      - rims_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:alpine
    container_name: rims_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    env_file:
      - .env
    volumes:
      - redisdata:/data
    networks:
      - rims_network
      - rims_internal
    expose:
      - "6379"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  queue:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile.prod
    container_name: rims_queue
    restart: unless-stopped
    working_dir: /var/www/html
    command: php artisan queue:work --sleep=3 --tries=3 --max-jobs=100 --max-time=3600 --memory=128
    environment:
      - PHP_MEMORY_LIMIT=256M
    # NO SOURCE CODE VOLUMES - Code is baked into image
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
    networks:
      - rims_network
    depends_on:
      - db
      - redis
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "php", "artisan", "queue:monitor", "default", "--max=100"]
      interval: 60s
      timeout: 30s
      retries: 3

  scheduler:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile.prod
    container_name: rims_scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    command: /bin/sh -c "while true; do php artisan schedule:run >> /dev/null 2>&1; sleep 60; done"
    # NO SOURCE CODE VOLUMES - Code is baked into image
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
    networks:
      - rims_network
    depends_on:
      - db
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

volumes:
  dbdata:
    driver: local
  redisdata:
    driver: local
  app_storage:
    driver: local
  app_cache:
    driver: local
  app_public:
    driver: local

networks:
  rims_network:
    external: true
  rims_internal:
    driver: bridge
    internal: true

secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_root_password:
    file: ./secrets/db_root_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  app_key:
    file: ./secrets/app_key.txt